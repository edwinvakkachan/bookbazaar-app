<%- include('../partials/admin/header') %>

<section class="content-main">
  <div class="container-fluid">
    <div class="row">
      <div class="col-12 mb-4">
        <div class="content-header">
          <h2 class="content-title">Add New Product</h2>
        </div>
      </div>

      <!-- Product Form -->
      <div class="col-lg-8">
        <div class="card mb-4">
          <div class="card-body">
            <form method="POST" action="/admin/addProducts" enctype="multipart/form-data" onsubmit="return false;">
              <!-- Product Name -->
              <div class="mb-3">
                <label for="product_name" class="form-label">Product Name</label>
                <input type="text" placeholder="Type here" name="productName" class="form-control" id="product_name">
                <div id="productName-error" class="error-message"></div>
              </div>

              <!-- Brand -->
              <div class="mb-3">
                <label class="form-label">Brand</label>
                <select class="form-select" name="brand">
                  <% for (let i = 0; i < brand.length; i++) { %>
                    <option value="<%= brand[i].brandName %>"><%= brand[i].brandName %></option>
                  <% } %>
                </select>
                <div id="brand-error" class="error-message"></div>
              </div>

              <!-- Description -->
              <div class="mb-3">
                <label class="form-label">Full Description</label>
                <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control" rows="4"></textarea>
                <div id="description-error" class="error-message"></div>
              </div>

              <!-- Price / Quantity Row -->
              <div class="row">
                <div class="col-md-4 mb-3">
                  <label class="form-label">Regular Price</label>
                  <input placeholder="$" name="regularPrice" type="text" class="form-control">
                  <div id="regularPrice-error" class="error-message"></div>
                </div>
                <div class="col-md-4 mb-3">
                  <label class="form-label">Sale Price</label>
                  <input placeholder="$" name="salePrice" type="text" class="form-control">
                  <div id="salePrice-error" class="error-message"></div>
                </div>
                <div class="col-md-4 mb-3">
                  <label class="form-label">Quantity</label>
                  <input name="quantity" type="number" class="form-control" min="0">
                  <div id="quantity-error" class="error-message"></div>
                </div>
              </div>

              <!-- Color -->
              <div class="mb-3">
                <label class="form-label">Color</label>
                <input name="color" type="text" class="form-control">
                <div id="color-error" class="error-message"></div>
              </div>

              <!-- Category -->
              <div class="mb-3">
                <label class="form-label">Category</label>
                <select class="form-select" name="category">
                  <% for (let i = 0; i < cat.length; i++) { %>
                    <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                  <% } %>
                </select>
                <div id="category-error" class="error-message"></div>
              </div>

              <!-- Images -->
              <div id="addedImagesContainer" class="mb-2"></div>

              <div class="card mb-3">
                <div class="card-header">
                  <h5>Choose Images</h5>
                </div>
                <div class="card-body">
                  <div class="row g-3">
                    <% for (let i = 1; i <= 4; i++) { %>
                      <div class="col-md-6">
                        <div class="mb-3">
                          <img src="" alt="" id="imgView<%= i %>" class="img-fluid mb-2">
                          <!-- IMPORTANT: same field name "images" for all 4 inputs (backend uses uploads.array('images',4)) -->
                          <input
                            class="form-control"
                            type="file"
                            name="images"
                            id="input<%= i %>"
                            accept="image/png, image/jpeg, image/jpg, image/webp"
                            onchange="viewImage(event, <%= i %>)">
                        </div>
                        <!-- inline crop area -->
                        <div class="image-cropper d-flex align-items-center mb-3" style="display:none; width: 300px; height: 200px;">
                          <img src="" id="croppedImg<%= i %>" alt="">
                          <button type="button" id="saveButton<%= i %>" class="btn btn-sm btn-primary ms-2">Save</button>
                        </div>
                      </div>
                    <% } %>
                  </div>
                  <div id="images-error" class="error-message"></div>
                </div>
              </div>

              <!-- Submit -->
              <div>
                <button class="btn btn-primary" type="button" onclick="validateAndSubmit()">Publish</button>
              </div>
            </form>
          </div>
        </div>
      </div>

    </div>
  </div>
</section>


<link href="https://unpkg.com/cropperjs@1.6.2/dist/cropper.min.css" rel="stylesheet">
<script src="https://unpkg.com/cropperjs@1.6.2/dist/cropper.min.js"></script>

<script>

  const croppers = {};   
  const saveHandlers = {};
  const selectedImages = [];

  function blobFromCanvas(canvas, type = 'image/jpeg', quality = 0.95) {
    return new Promise(resolve => canvas.toBlob(resolve, type, quality));
  }

 
  function viewImage(event, index) {
    const input = event.target;
    const reader = new FileReader();

    reader.onload = function () {
      const dataURL = reader.result;
      const image = document.getElementById('imgView' + index);
      image.src = dataURL;

     
      if (croppers[index]) {
        try { croppers[index].destroy(); } catch(e) {}
        delete croppers[index];
      }

      
      croppers[index] = new Cropper(image, {
        aspectRatio: 1,
        viewMode: 1,
        guides: true,
        background: false,
        autoCropArea: 1,
        zoomable: true
      });

     
      const cropperContainer = document.querySelector('#croppedImg' + index).parentNode;
      cropperContainer.style.display = 'block';

      const saveButton = document.querySelector('#saveButton' + index);

      
      if (saveHandlers[index]) {
        saveButton.removeEventListener('click', saveHandlers[index]);
      }

      
      saveHandlers[index] = async function () {
        const canvas = croppers[index].getCroppedCanvas();
        const blob = await blobFromCanvas(canvas, 'image/jpeg', 0.95);
        if (!blob) return;

        const fileName = `cropped-${Date.now()}-${index}.jpg`;
        const file = new File([blob], fileName, { type: blob.type });
        const dt = new DataTransfer();
        dt.items.add(file);
        document.getElementById('input' + index).files = dt.files;

       
        const croppedImage = document.getElementById('croppedImg' + index);
        croppedImage.src = URL.createObjectURL(blob);

        cropperContainer.style.display = 'none';
        try { croppers[index].destroy(); } catch(e) {}
        delete croppers[index];
      };

      saveButton.addEventListener('click', saveHandlers[index]);
    };

    if (input.files && input.files[0]) {
      reader.readAsDataURL(input.files[0]);
    }
  }

 
  ['input1','input2','input3','input4'].forEach(id => {
    const el = document.getElementById(id);
    if (el) el.addEventListener('change', handleFileSelect);
  });

  function handleFileSelect(event) {
    const addedImagesContainer = document.getElementById('addedImagesContainer');
    addedImagesContainer.innerHTML = '';
    const files = event.target.files || [];
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      selectedImages.push(file);

      const thumbnail = document.createElement('div');
      thumbnail.classList.add('thumbnail');

      const img = document.createElement('img');
      img.src = URL.createObjectURL(file);
      img.alt = 'thumbnail';
      img.style.width = '50px';
      img.style.height = 'auto';

      const removeIcon = document.createElement('span');
      removeIcon.classList.add('remove-icon');
      removeIcon.innerHTML = '&times;';
      removeIcon.style.cursor = 'pointer';
      removeIcon.addEventListener('click', function () {
        const idx = selectedImages.indexOf(file);
        if (idx !== -1) selectedImages.splice(idx, 1);
        thumbnail.remove();
      });

      thumbnail.appendChild(img);
      thumbnail.appendChild(removeIcon);
      addedImagesContainer.appendChild(thumbnail);
    }
  }

  
  async function ensureAllCropsApplied() {
    for (const idx of [1,2,3,4]) {
      if (croppers[idx]) {
        const canvas = croppers[idx].getCroppedCanvas();
        const blob = await blobFromCanvas(canvas, 'image/jpeg', 0.95);
        const input = document.getElementById('input' + idx);
        if (blob && input) {
          const fileName = `auto-cropped-${Date.now()}-${idx}.jpg`;
          const file = new File([blob], fileName, { type: blob.type });
          const dt = new DataTransfer();
          dt.items.add(file);
          input.files = dt.files;
        }
        try { croppers[idx].destroy(); } catch(e) {}
        delete croppers[idx];
      }
    }
  }

  function validateForm() {
    clearErrorMessages();
    let ok = true;

    const name = document.getElementsByName('productName')[0].value.trim();
    const description = document.getElementById('descriptionid').value.trim();
    const price = document.getElementsByName('regularPrice')[0].value.trim();
    const saleprice = document.getElementsByName('salePrice')[0].value.trim();
    const color = document.getElementsByName('color')[0].value.trim();
    const quantityEl = document.getElementsByName('quantity')[0];
    const quantity = quantityEl ? quantityEl.value : '';

    if (!name) { displayErrorMessage('productName-error', 'Please enter a product name.'); ok = false; }
    if (!description) { displayErrorMessage('description-error', 'Please enter a product description.'); ok = false; }
    if (!/^\d+$/.test(quantity) || parseInt(quantity,10) < 0) { displayErrorMessage('quantity-error', 'Enter a valid non-negative quantity.'); ok = false; }
    if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) { displayErrorMessage('regularPrice-error', 'Enter a valid price.'); ok = false; }
    if (saleprice && (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0)) { displayErrorMessage('salePrice-error', 'Enter a valid sale price.'); ok = false; }
    if (saleprice && parseFloat(price) <= parseFloat(saleprice)) { displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.'); ok = false; }
    if (!color) { displayErrorMessage('color-error', 'Please enter a color.'); ok = false; }

    
    const inputs = [1,2,3,4].map(i => document.getElementById('input' + i));
    const hasAny = inputs.some(inp => inp && inp.files && inp.files.length > 0);
    if (!hasAny) { displayErrorMessage('images-error', 'Please select an image.'); ok = false; }

    return ok;
  }

  function displayErrorMessage(id, msg) {
    const el = document.getElementById(id);
    if (el) { el.innerText = msg; el.style.display = 'block'; }
  }

  function clearErrorMessages() {
    document.querySelectorAll('.error-message').forEach(el => { el.innerText = ''; el.style.display = 'none'; });
  }

  async function validateAndSubmit() {
    if (!validateForm()) return;
    await ensureAllCropsApplied();  
    document.forms[0].submit();
  }
</script>

<%- include('../partials/admin/footer') %>
