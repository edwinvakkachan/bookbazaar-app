<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Login</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f8f9fa;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .admin-login-container {
            background: white;
            padding: 3rem 2.5rem;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
            width: 100%;
            max-width: 400px;
            text-align: center;
        }

        .admin-title {
            font-size: 1.875rem;
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 3rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
            text-align: left;
        }

        .form-input {
            width: 100%;
            padding: 0.875rem 1rem;
            border: 1.5px solid #d1d5db;
            border-radius: 6px;
            background-color: #ffffff;
            font-size: 0.95rem;
            color: #374151;
            outline: none;
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
        }

        .form-input:focus {
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .form-input::placeholder {
            color: #9ca3af;
        }

        .login-button {
            width: 100%;
            padding: 0.875rem 1rem;
            background-color: #000000;
            color: white;
            border: none;
            border-radius: 6px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
            margin-top: 1rem;
        }

        .login-button:hover {
            background-color: #1f2937;
        }

        .login-button:active {
            transform: translateY(1px);
        }

        .login-button:disabled {
            background-color: #6b7280;
            cursor: not-allowed;
            transform: none;
        }

        /* Error message styling */
        .error-message {
            background-color: #fef2f2;
            border: 1px solid #fecaca;
            border-radius: 6px;
            padding: 0.75rem;
            margin-bottom: 1rem;
            color: #dc2626;
            font-size: 0.875rem;
            display: none;
        }

        /* Success message styling */
        .success-message {
            background-color: #f0fdf4;
            border: 1px solid #bbf7d0;
            border-radius: 6px;
            padding: 0.75rem;
            margin-bottom: 1rem;
            color: #059669;
            font-size: 0.875rem;
            display: none;
        }

        /* Loading state */
        .loading {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid #ffffff;
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 1s ease-in-out infinite;
            margin-right: 0.5rem;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        /* Responsive design */
        @media (max-width: 480px) {
            .admin-login-container {
                margin: 1rem;
                padding: 2rem 1.5rem;
            }

            .admin-title {
                font-size: 1.5rem;
                margin-bottom: 2rem;
            }
        }

        /* Focus visible for accessibility */
        .form-input:focus-visible,
        .login-button:focus-visible {
            outline: 2px solid #3b82f6;
            outline-offset: 2px;
        }
    </style>
</head>
<body>
    <div class="admin-login-container">
        <h1 class="admin-title">Admin Login</h1>
        
        <!-- Error message -->
        <div class="error-message" id="errorMessage"></div>
        
        <!-- Success message -->
        <div class="success-message" id="successMessage"></div>
        
        <form id="adminLoginForm">
            <!-- Email field -->
            <div class="form-group">
                <input 
                    type="email" 
                    class="form-input" 
                    placeholder="get@ziontutorial.com" 
                    id="email" 
                    required
                    autocomplete="email"
                >
            </div>

            <!-- Password field -->
            <div class="form-group">
                <input 
                    type="password" 
                    class="form-input" 
                    placeholder="Password" 
                    id="password" 
                    required
                    autocomplete="current-password"
                >
            </div>

            <!-- Login button -->
            <button type="submit" class="login-button" id="loginButton">
                Log in
            </button>
        </form>
    </div>

    <!-- <script>
        // Form elements
        const form = document.getElementById('adminLoginForm');
        const emailInput = document.getElementById('email');
        const passwordInput = document.getElementById('password');
        const loginButton = document.getElementById('loginButton');
        const errorMessage = document.getElementById('errorMessage');
        const successMessage = document.getElementById('successMessage');

        // Hide messages function
        function hideMessages() {
            errorMessage.style.display = 'none';
            successMessage.style.display = 'none';
        }

        // Show error message
        function showError(message) {
            hideMessages();
            errorMessage.textContent = message;
            errorMessage.style.display = 'block';
        }

        // Show success message
        function showSuccess(message) {
            hideMessages();
            successMessage.textContent = message;
            successMessage.style.display = 'block';
        }

        // Set loading state
        function setLoading(isLoading) {
            if (isLoading) {
                loginButton.disabled = true;
                loginButton.innerHTML = '<span class="loading"></span>Logging in...';
            } else {
                loginButton.disabled = false;
                loginButton.innerHTML = 'Log in';
            }
        }

        // Form submission handler
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const email = emailInput.value.trim();
            const password = passwordInput.value;

            // Hide previous messages
            hideMessages();

            // Basic validation
            if (!email || !password) {
                showError('Please fill in all fields');
                return;
            }

            // Email validation
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                showError('Please enter a valid email address');
                return;
            }

            // Set loading state
            setLoading(true);

            // Simulate API call delay
            setTimeout(() => {
                // Demo credentials check
                if (email === 'get@ziontutorial.com' && password === 'admin123') {
                    showSuccess('Login successful! Redirecting to admin dashboard...');
                    
                    // Simulate redirect after success
                    setTimeout(() => {
                        alert('Redirecting to admin dashboard...\n\nIn a real application, you would redirect to the admin panel.');
                        // window.location.href = '/admin/dashboard';
                    }, 1500);
                } else {
                    showError('Invalid email or password. Please try again.');
                }
                
                setLoading(false);
            }, 1000);

            // In a real application, you would make an API call here:
            /*
            try {
                const response = await fetch('/api/admin/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ email, password }),
                });

                const data = await response.json();

                if (response.ok) {
                    showSuccess('Login successful! Redirecting...');
                    localStorage.setItem('adminToken', data.token);
                    setTimeout(() => {
                        window.location.href = '/admin/dashboard';
                    }, 1500);
                } else {
                    showError(data.message || 'Login failed. Please try again.');
                }
            } catch (error) {
                showError('Network error. Please check your connection and try again.');
            } finally {
                setLoading(false);
            }
            */
        });

        // Clear messages when user starts typing
        emailInput.addEventListener('input', hideMessages);
        passwordInput.addEventListener('input', hideMessages);

        // Demo credentials hint (remove in production)
        console.log('Demo credentials:\nEmail: get@ziontutorial.com\nPassword: admin123');
        
        // Auto-focus email field
        emailInput.focus();

        // Handle Enter key on password field
        passwordInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                form.dispatchEvent(new Event('submit'));
            }
        });
    </script> -->
</body>
</html>